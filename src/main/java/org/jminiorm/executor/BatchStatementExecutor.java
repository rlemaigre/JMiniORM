package org.jminiorm.executor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jminiorm.IQueryTarget;
import org.jminiorm.exception.DBException;

/**
 * Executes insert, update and delete statements in JDBC batch mode, which may give a huge performance boost when
 * inserting many rows especially if the database server is on a different machine than the application.
 * <p>
 * Depending on the database driver, this may not work properly with generated keys. Check the driver documentation and
 * ensure that the jdbc method {@link Statement#getGeneratedKeys()} returns ALL the keys generated by a batch and not
 * just the last one.
 */
public class BatchStatementExecutor extends AbstractStatementExecutor {

    private int batchSize;

    public BatchStatementExecutor(int batchSize) {
        this.batchSize = batchSize;
    }

    public BatchStatementExecutor() {
        this(1000);
    }

    @Override
    public List<Long> executeUpdate(IQueryTarget target, String sql, List<List<Object>> params, String generatedColumn)
            throws DBException {
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            List<Long> generatedKeys = new ArrayList<>();
            con = target.getConnection();
            if (generatedColumn != null)
                stmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            else
                stmt = con.prepareStatement(sql);
            boolean remains = false;
            for (int i = 1; i <= params.size(); i++) {
                List<Object> curParams = params.get(i - 1);
                setParameters(target, stmt, curParams);
                stmt.addBatch();
                if (i % batchSize == 0) {
                    stmt.executeBatch();
                    generatedKeys.addAll(getGeneratedKeys(target, stmt, generatedColumn));
                    remains = false;
                } else {
                    remains = true;
                }
            }
            if (remains) {
                stmt.executeBatch();
                generatedKeys.addAll(getGeneratedKeys(target, stmt, generatedColumn));
            }
            return generatedKeys;
        } catch (SQLException e) {
            throw new DBException(e);
        } finally {
            try {
                if (con != null) target.releaseConnection(con);
            } catch (Exception e) {
            }
            try {
                if (stmt != null) stmt.close();
            } catch (Exception e) {
            }
        }
    }

    protected List<Long> getGeneratedKeys(IQueryTarget target, PreparedStatement stmt, String generatedColumn) {
        if (generatedColumn == null) return Collections.emptyList();
        else {
            List<Long> generatedKeys = new ArrayList<>();
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                int generatedKeyIndex = getGeneratedColumnIndex(target, rs, generatedColumn);
                while (rs.next()) {
                    generatedKeys.add(rs.getLong(generatedKeyIndex));
                }
                return generatedKeys;
            } catch (SQLException e) {
                throw new DBException(e);
            }
        }
    }

}
